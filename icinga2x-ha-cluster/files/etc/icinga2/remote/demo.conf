/*
 * Demo configuration for Icinga 2 remote client
 * checks including some hosts, random services
 * notifications, dependencies, etc.
 *
 * Note: These are *examples*, for proper
 * configuration please follow the documentation.
 *
 * The example configuration from icinga2 packages
 * is not included.
 */

const ClientNotes = "This demo example shows how to execute checks on a remote client."

object Host "demo-host-remote" {
  import "generic-host"

  address = "127.0.0.1"
  address6 = "::1"

  vars.os = "Linux"

  vars.services["ping4"] = {
    command = "ping4"
  }
  vars.services["ping6"] = {
    command = "ping4"
  }
  vars.services["disk"] = {
    command = "disk"
  }
  vars.services["disk /"] = {
    /* remote check requires an additional partition command argument
     * use the same CheckCommand object and same command argument names
     * local and remote. The ITL already ships plenty of plugin check
     * commands.
     */
    command = "disk"
    disk_partition = "/"
  }

  vars.notification["mail"] = {
    groups = [ "icingaadmins" ]
  }

  vars.remote_client = "icinga2b"

  /* host specific check arguments */
  vars.swap_wfree = 95
  vars.swap_cfree = 50
  vars.users_wgreater = 10
  vars.users_cgreater = 20
  vars.load_wload1 = 4
  vars.load_wload5 = 3
  vars.load_wload15 = 2
  vars.load_cload1 = 8
  vars.load_cload5 = 6
  vars.load_cload15 = 4
  vars.procs_wgreater = 100
  vars.procs_cgreater = 200

  notes = ClientNotes
}

object Host "demo-host-remote-no-swap" {
  import "generic-host"

  address = "127.0.0.1"
  address6 = "::1"

  vars.os = "Linux"

  vars.remote_client = "icinga2b"
  vars.disable_swap = true

  /* host specific check arguments */
  vars.users_wgreater = 10
  vars.users_cgreater = 20
  vars.load_wload1 = 4
  vars.load_wload5 = 3
  vars.load_wload15 = 2
  vars.load_cload1 = 8
  vars.load_cload5 = 6
  vars.load_cload15 = 4
  vars.procs_wgreater = 100
  vars.procs_cgreater = 200

  notes = ClientNotes
}


/* apply remote services defined in host dictionary `services` */
apply Service "remote-" for (service => config in host.vars.services) {
  import "generic-service"

  vars.command = "disk" //default
  vars += config

  check_command = vars.command

  /* make sure these checks are executed on the remote client.
   * requires the _same_ CheckCommand or EventCommand objects
   * defined over there. all command arguments are calculated
   * and passed through automatically.
   */
  command_endpoint = host.vars.remote_client

  notes = ClientNotes

  assign where host.vars.services && host.vars.remote_client
}

/*
 * add some generic apply rules which are only applied when `vars.remote_client` is set
 * on the host
 */
apply Service "swap-remote" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.vars.remote_client

  /* override (remote) command arguments with host settings */
  vars.swap_wfree = host.vars.swap_wfree
  vars.swap_cfree = host.vars.swap_cfree

  /* assign where a remote client is set */
  assign where host.vars.remote_client
  ignore where host.vars.disable_swap == true
}

apply Service "users-remote" {
  import "generic-service"

  check_command = "users"
  command_endpoint = host.vars.remote_client

  /* override (remote) command arguments with host settings */
  vars.users_wgreater = host.vars.users_wgreater
  vars.users_cgreater = host.vars.users_cgreater

  /* assign where a remote client is set */
  assign where host.vars.remote_client
}

apply Service "load-remote" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.vars.remote_client

  /* override (remote) command arguments with host settings */
  vars.load_wload1 = host.vars.load_wload1
  vars.load_wload5 = host.vars.load_wload5
  vars.load_wload15 = host.vars.load_wload15
  vars.load_cload1 = host.vars.load_cload1
  vars.load_cload5 = host.vars.load_cload5
  vars.load_cload15 = host.vars.load_cload15

  /* assign where a remote client is set */
  assign where host.vars.remote_client
}

apply Service "procs-remote" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.remote_client

  /* override (remote) command arguments with host settings */
  vars.procs_wgreater = host.vars.procs_wgreater
  vars.procs_cgreater = host.vars.procs_cgreater

  /* assign where a remote client is set */
  assign where host.vars.remote_client
}

apply Service "icinga-remote" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.vars.remote_client

  /* assign where a remote client is set */
  assign where host.vars.remote_client
}
